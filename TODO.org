* TODO Normalize columns
  From Chun:

  #+BEGIN_QUOTE
  The general requirement is to convert a variety of column based
  data-sets into a uniform column schema.

  For example:

  *original headers:*
  factual_id,name,address,region

  *target headers:*
  factual_id,name,address,locality,region

  If the column doesn't exist, just add an empty string.

  uuid1,name1,address1,region1
  becomes
  uuid1,name1,address1,,region1

  Requirements
  - handle a variety of delimiters, e.g. csv,tsv
    - should be able to take inputs of csv and tsv and output csv or tsv
  - handle re-ordering of columns
  - handle dropping of columns (although this should be rare)
  - target and original headers should not be hard-coded
    
  This might be helpful:

  https://svn.corp.factual.com/projects/cascalog_commons/src/cascalog_commons/
  #+END_QUOTE

  #+BEGIN_SRC clojure :tangle cascalog.clj :shebang #!/usr/bin/env clj
    (use 'clojure.string)
    (use 'add-classpath.core)
    
    (add-classpath "lib/cascalog-*")
    (add-classpath "lib/hadoop-core-*")
    (add-classpath "lib/commons-logging-*")
    (add-classpath "lib/commons-codec-*")
    (add-classpath "lib/commons-httpclient-*")
    (add-classpath "lib/slf4j-*")
    (add-classpath "lib/debug-*")
    (add-classpath "lib/lambda-*")
    (add-classpath "lib/cascalog-commons-*")
    (add-classpath "lib/clojure-csv-*")
    (add-classpath "lib/tools.cli-*")
    (add-classpath "lib/cadr-*")
    
    (use 'debug.core)
    (use 'lambda.core)
    ;; (use 'cascalog.playground)
    (use 'cascalog.api)
    (use 'cascalog-commons.core)
    (use 'clojure-csv.core)
    (use 'cadr.core)
    (use 'clojure.tools.cli)
    
    (bootstrap)
    ;; (debug (?<- (stdout)
    ;;             [?person ?age]
    ;;             (age ?person ?age)
    ;;             (< ?age 30))
    ;;        (?<- (stdout) 
    ;;             [!line]
    ;;             ((hfs-textline "data.tab") !line)
    ;;             (:distinct false)))
    
    (def split-line
      (λ ([line]
            (split-line line *delimiter*))
         ([line delimiter]
            (binding [*delimiter* delimiter]
              (car (parse-csv line))))))
    
    (def normalize
      (λ [in-headers out-headers line delimiter]
         (let [header->value (zipmap in-headers (split-line line delimiter))]
           (join delimiter (map #(get header->value % "") out-headers)))))
    
    (let [args '("data-head.tab"
                 "-i"
                 "factual_id,name,address,locality,postcode,country,tel,fax,website,latitude,longitude,category,status,email"
                 "-o"
                 "email,harro,status"
                 "-s"
                 "data-head-normalized.tab"
                 "-t")]
      (let [[{sink :sink
              in-headers :in-headers
              out-headers :out-headers
              comma-delimited :comma-delimited
              tab-delimited :tab-delimited}
             files
             usage]
            (cli args
                 ["-s" "--sink" "Output to sink (defaults to stdout)"
                  :name :sink
                  :default false]
                 ["-i" "--in-headers" "Input-file headers"
                  :name :in-headers]
                 ["-o" "--out-headers" "Output-file headers"
                  :name :out-headers]
                 ["-c" "--comma-delimited" "Comma-delimited files"
                  :name :comma-delimited
                  :default true
                  :flag true]
                 ;; How to set up mutually exclusive flags?
                 ["-t" "--tab-delimited" "Tab-delimited files"
                  :name :tab-delimited
                  :default false
                  :flag true])]
        (if (empty? files)
          (println usage)
          (let [delimiter (if (and comma-delimited (not tab-delimited)) \, \tab)
                in-file (car files)
                sink (if sink
                       (hfs-textline sink)
                       (stdout))]
            (let [in-headers (split-line in-headers \,)
                  out-headers (split-line out-headers \,)]
              (?<- sink [!normalized-line]
                   ((hfs-textline in-file) !line)
                   (normalize in-headers out-headers !line delimiter :> !normalized-line)
                   (:distinct false)))))))
    
  #+END_SRC
* DONE Parse headers
  CLOSED: [2011-12-05 Mon 11:48]
  #+BEGIN_SRC clojure :tangle split.clj :shebang #!/usr/bin/env clj
    (use 'clojure.string)
    (use 'clojure.test)
    
    (is (= (split "harro,freunds" #",")
           '["harro" "freunds"]))
  #+END_SRC
